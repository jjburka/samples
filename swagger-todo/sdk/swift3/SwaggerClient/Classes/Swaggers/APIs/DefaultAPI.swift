//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class DefaultAPI: APIBase {
    /**

     - parameter item: (body) Item to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addItem(item: ItemInput, completion: @escaping ((_ data: Item?,_ error: ErrorResponse?) -> Void)) {
        addItemWithRequestBuilder(item: item).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /items
     - Creates a new item in the store.  Duplicates are allowed
     - API Key:
       - type: apiKey Authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter item: (body) Item to add 

     - returns: RequestBuilder<Item> 
     */
    open class func addItemWithRequestBuilder(item: ItemInput) -> RequestBuilder<Item> {
        let path = "/items"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = item.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of pet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePet(id: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deletePetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /items/{id}
     - deletes a single pet based on the ID supplied
     - API Key:
       - type: apiKey Authorization 
       - name: api_key
     
     - parameter id: (path) ID of pet 

     - returns: RequestBuilder<Void> 
     */
    open class func deletePetWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/items/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findItems(completion: @escaping ((_ data: [Item]?,_ error: ErrorResponse?) -> Void)) {
        findItemsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /items
     - Returns all Items from the system that the user has access to
     - API Key:
       - type: apiKey Authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : 123456789
} ]}]

     - returns: RequestBuilder<[Item]> 
     */
    open class func findItemsWithRequestBuilder() -> RequestBuilder<[Item]> {
        let path = "/items"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Item]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of pet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findPetById(id: Int64, completion: @escaping ((_ data: Item?,_ error: ErrorResponse?) -> Void)) {
        findPetByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /items/{id}
     - Returns a user based on a single ID, if the user does not have access to the pet
     - API Key:
       - type: apiKey Authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) ID of pet 

     - returns: RequestBuilder<Item> 
     */
    open class func findPetByIdWithRequestBuilder(id: Int64) -> RequestBuilder<Item> {
        var path = "/items/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of pet 
     - parameter item: (body) Item to update in the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePet(id: Int64, item: ItemInput, completion: @escaping ((_ data: Item?,_ error: ErrorResponse?) -> Void)) {
        updatePetWithRequestBuilder(id: id, item: item).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - PUT /items/{id}
     - Update a pet in the store.
     - API Key:
       - type: apiKey Authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path) ID of pet 
     - parameter item: (body) Item to update in the store 

     - returns: RequestBuilder<Item> 
     */
    open class func updatePetWithRequestBuilder(id: Int64, item: ItemInput) -> RequestBuilder<Item> {
        var path = "/items/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = item.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
